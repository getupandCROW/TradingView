//@version=5
strategy(title="Condition Developer Super Study Script [andCROW] v02", shorttitle="CndtnDvlpr_SprStd_v02", overlay=true, precision = 0)


// --*************************- ************************* -*************************-- //
                        // -- plot() | Condition Examples -- // 


src                                     =           close
BULL_COLOR                              =           color.lime
i                                       =           1
len                                     =           input(20, "Length")
float f                                 =           10.5
closeRoundedToTick                      =           math.round_to_mintick(close)
st                                      =           ta.supertrend(4, 14)
var barRange                            =           float(na)
var firstBarOpen                        =           open
varip float lastClose                   =           na
[macdLine, signalLine, histLine]        =           ta.macd(close, 12, 26, 9)


priceClose                              =          (close)
priceOpen                               =          (open)
priceHigh                               =          (high)
priceLow                                =          (low)

priceClose_1                            =          (close[1])
priceOpen_1                             =          (open[1])
priceHigh_1                             =          (high[1])
priceLow_1                              =          (low[1])

priceClose_2                            =          (close[2])
priceOpen_2                             =          (open[2])
priceHigh_2                             =          (high[2])
priceLow_2                              =          (low[2])

priceClose_3                            =          (close[3])
priceOpen_3                             =          (open[3])
priceHigh_3                             =          (high[3])
priceLow_3                              =          (low[3])




// --*************************- ************************* -*************************-- //


// --*************************- ************************* -*************************-- //
                        // -- plot() | Condition Examples -- // 




    // --*************-- //
    // --*************-- //

    
    // --*************-- //
    // --*************-- //

    
    // --*************-- //
    // --*************-- //


atrPeriodInput        =     input.int(14,       "ATR period",       minval   =  1,              tooltip       =   "Using a period of 1 yields True Range.")

var table atrDisplay  =     table.new(position.top_right,   1,  1,  bgcolor  =  color.gray,     frame_width   =   2,    frame_color = color.black)
myAtr                 =     ta.atr(atrPeriodInput)

if barstate.islast
    table.cell(atrDisplay, 0, 0, str.tostring(myAtr, format.mintick), text_color = color.white)


    




    // --*************-- //
    // --*************-- //



line1           =       ta.sma(close,       5)
line2           =       ta.sma(close,       20)
p1PlotID        =       plot(line1)
p2PlotID        =       plot(line2)

fill(p1PlotID,  p2PlotID,   line1 > line2     ?    color.new(color.green, 90)     :     color.new(color.red, 90))




// plotColor = if close > open
//     color.green
// else
//     color.red



    // --***************************-- //
    // --Candlestick Count and Color-- //
    // - Candlestick Count and Color - //
    // --Candlestick Count and Color-- //    
    // --***************************-- //

/////////////////-- Green Bars Count --//
////////////
///////
///

var cntCnscUPDN = 0

isGreen = close >= open

if isGreen
    cntCnscUPDN := cntCnscUPDN + 1

plot(cntCnscUPDN)

CndlStk_PrdNpt = input.int(14,  "Consecutive Candlestick Colors Period", minval = 1, tooltip = "A running count of the # of consecutive green or red candles. Lookback Length --> (period).")

var table CndlStkCnt_Display = table.new(position.top_right, 10, 1, bgcolor = (isGreen ? color.green : color.red), frame_width = 2, frame_color = color.black)

if barstate.islast
    table.cell(atrDisplay,      0,      0,      str.tostring(cntCnscUPDN,       format.mintick),    text_color      =       color.white)



    // --*************-- //
    //      --RSI--      //
    //      - RSI -      //
    //      --RSI--      //
    // --*************-- //



r = ta.rsi(close, 20)
rIsLow = r < 30
hline(30)

plot(r,                     "RSI",                          rIsLow      ?       color.fuchsia       :       color.black)    // Method #1: Change the plot's color.

plotchar(rIsLow,            "rIsLow char at bottom", "▲",   location.bottom,        size = size.small)                      // Method #2: Plot a character in the bottom region of the display.

plotchar(rIsLow ? r : na,   "rIsLow char on line", "•",     location.absolute,      color.red,          size = size.small)  // Method #3: Plot a character on the RSI line.

plotshape(rIsLow,           "rIsLow shape",                 shape.arrowup,          location.top)                           // Method #4: Plot a shape in the top region of the display.

plotarrow(rIsLow ? 1 : na,  "rIsLow arrow")                                                                                 // Method #5: Plot an arrow.

bgcolor(rIsLow ? color.new(color.green, 90) : na)                                                                           // Method #6: Change the background's color.




    // --*************-- //
    // --*************-- //




sensitivityInput = input.int(2, "Sensitivity for (SMA-20-CLOSE)", minval = 1, tooltip = "Higher values make color changes less sensitive.")

ma = ta.sma(close, 20)
maUp = ta.rising(ma, sensitivityInput)
maDn = ta.falling(ma, sensitivityInput)


var maColor = color.gray                                                                                // On first bar only, initialize color to gray

if maUp    
    maColor := color.lime                                                                               // MA has risen for two bars in a row --> make it lime.
else if maDn    
    maColor := color.fuchsia                                                                            // MA has fallen for two bars in a row --> make it fuchsia.

plot(ma, "MA", maColor, 2)



// --*************************- ************************* -*************************-- //


// --*************************- ************************* -*************************-- //
                        // -- 3 Candle Odds | Simple Start -- // 



// determine candle direction
candle_dir = math.round((close-open)*2)/2


shortCondition = (candle_dir[2] >= 0 and candle_dir[1] >= 0 and candle_dir < 0)                         // sell if previous 2 candles were green and this is red

longCondition = (candle_dir[3] < 0 and candle_dir[2] < 0 and candle_dir[1] < 0 and candle_dir > 0)      // buy if previous 3 candles was red, and this candle was green



// --*************************- ************************* -*************************-- //


// --*************************- ************************* -*************************-- //
            // -- ALERT SIGNS--||--INDICATOR SIGNALS--||--SCREENING -- // 








// --*************************- ************************* -*************************-- //


// --*************************- ************************* -*************************-- //
                        // -- Strategy--||--ENTRY--||--EXIT -- // 




if (longCondition)
    strategy.entry("buy", strategy.long)

if (shortCondition)
    strategy.entry("sell", strategy.short, when = strategy.openprofit > 100)



// --*************************- ************************* -*************************-- //


//// # ========================================================================= #
//                    // --- START My Testing --- //
//// # ========================================================================= #
//
//
//if zerolineCross > hl2                      // 1st half SHORT,2nd half LONG
//
//
//
//
//
////if signalCross > hl2                                        // DOWNtrend
//    if signalCrossColor == red                              // STRONG DOWNtrend
//        if zerolineCross < hl2                              // 
//            if CDLTRD_hullMA > hl2 and CDLTRD_hullMA > 
//                if 
//
//
//        else if zerolineCross ? hl2
//            if 
//
//
//    else if signalCrossColor == green
//
//
//if signalCross < hl2  
//    if SMI < hl2 and VWMA < hl2 and AVSL < hl2  // 3 little are under price
//        if crossunder(signalCross, hl2)         // signal crosses under price
//            // BUY LONG
//            
//
//if crossunder(zerolineCross, hl2)         // signal crosses under price
//    if (//all 6 of the lines are < hl2
//    // BUY LONG
//
//
//if hullMA rises above (high) and (crossover(hl2) or turns red)
//    if marketTrender < hl2
//        // SELL LONG
//    else if 
//
//else if hullMA falls below (low)
//
//
//// # ========================================================================= #
//                    // --- FINISH My Testing --- //
//// # ========================================================================= #